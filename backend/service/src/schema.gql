# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CeaseCause {
  id: Int!
  description: String!
  cats: [Cat!]!
}

type ColonyAnnotation {
  id: Int!
  annotation: String!
  date: DateTime!
  colonyId: Int!
  colony: Colony!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Environment {
  id: Int!
  description: String!
  colonies: [Colony!]!
}

type LocationType {
  id: Int!
  description: String!
  colonies: [Colony!]
}

type Town {
  id: Int!
  name: String!
  colonies: [Colony!]!
}

type Role {
  id: Int!
  description: String!
  users: [User!]!
}

type UserAnnotation {
  id: Int!
  annotation: String!
  date: DateTime!
  userId: Int!
  user: User!
}

type UserCeaseCause {
  id: Int!
  description: String!
  users: [User!]!
}

type Document {
  id: Int!
  userId: Int!
  createdAt: DateTime!
  originalFilename: String!
  document: String!
  user: User!
}

type User {
  id: Int!
  name: String!
  surnames: String!
  idCard: String!
  phoneNumber: String!
  email: String!
  createdAt: DateTime!
  ceasedAt: DateTime
  ceaseCauseId: Int
  ceaseCause: UserCeaseCause
  authorizesWhatsApp: Boolean
  password: String!
  colonies: [Colony!]!
  roleId: Int
  role: Role
  annotations: [UserAnnotation!]
  documents: [Document!]
}

type Colony {
  id: Int!
  createdAt: DateTime!
  address: String!
  cats: [Cat!]
  managers: [User!]!
  locationTypeId: Int
  locationType: LocationType!
  environmentId: Int
  environment: Environment!
  townId: Int!
  town: Town!
  annotations: [ColonyAnnotation!]
}

type Color {
  id: Int!
  description: String!
  cats: [Cat!]!
}

type EyeColor {
  id: Int!
  description: String!
  cats: [Cat!]!
}

type Pattern {
  id: Int!
  description: String!
  cats: [Cat!]!
}

type Picture {
  id: Int!
  catId: Int!
  createdAt: DateTime!
  originalFilename: String!
  image: String!
  thumbnail: String!
  cat: Cat!
}

type Cat {
  id: Int!
  createdAt: DateTime!
  ceasedAt: DateTime
  ceaseCauseId: Int
  ceaseCause: CeaseCause
  bornAt: DateTime
  sterilized: Boolean
  sterilizedAt: DateTime
  colonyId: Int
  colony: Colony
  patternId: Int
  pattern: Pattern
  gender: Gender
  eyeColorId: Int
  eyeColor: EyeColor
  colors: [Color!]
  annotations: [Annotation!]
  pictures: [Picture!]
}

""""""
enum Gender {
  Male
  Female
  Unknown
}

type Annotation {
  id: Int!
  annotation: String!
  date: DateTime!
  catId: Int!
  cat: Cat!
}

type RemoveAnnotationResult {
  result: Boolean!
}

type FindAnnotationsResult {
  total: Int!
  items: [Annotation!]!
}

type AccessToken {
  result: String!
}

type RemoveCatResult {
  result: Boolean!
}

type FindCatsResult {
  total: Int!
  items: [Cat!]!
}

type RemoveCeaseCauseResult {
  result: Boolean!
}

type FindCeaseCausesResult {
  total: Int!
  items: [CeaseCause!]!
}

type RemoveColonyResult {
  result: Boolean!
}

type FindColoniesResult {
  total: Int!
  items: [Colony!]!
}

type AddColonyManagerResult {
  result: Boolean!
}

type RemoveColonyManagerResult {
  result: Boolean!
}

type RemoveUserResult {
  result: Boolean!
}

type FindUsersResult {
  total: Int!
  items: [User!]!
}

type RemoveColonyAnnotationResult {
  result: Boolean!
}

type FindColonyAnnotationsResult {
  total: Int!
  items: [ColonyAnnotation!]!
}

type RemoveColorResult {
  result: Boolean!
}

type FindColorsResult {
  total: Int!
  items: [Color!]!
}

type RemoveEnvironmentResult {
  result: Boolean!
}

type FindEnvironmentsResult {
  total: Int!
  items: [Environment!]!
}

type FindEyeColorsResult {
  total: Int!
  items: [EyeColor!]!
}

type RemoveLocationTypeResult {
  result: Boolean!
}

type FindLocationTypesResult {
  total: Int!
  items: [LocationType!]!
}

type RemovePatternResult {
  result: Boolean!
}

type FindPatternsResult {
  total: Int!
  items: [Pattern!]!
}

type FindRolesResult {
  total: Int!
  items: [Role!]!
}

type RemoveRoleResult {
  result: Boolean!
}

type RemoveTownResult {
  result: Boolean!
}

type FindTownsResult {
  total: Int!
  items: [Town!]!
}

type RemoveUserAnnotationResult {
  result: Boolean!
}

type FindUserAnnotationsResult {
  total: Int!
  items: [UserAnnotation!]!
}

type FindUserCeaseCausesResult {
  total: Int!
  items: [UserCeaseCause!]!
}

type RemoveUserCeaseCauseResult {
  result: Boolean!
}

type Query {
  annotations(order: String, descending: Boolean, skip: Int, take: Int, id: Int, catId: Int, annotation: String): FindAnnotationsResult
  annotation(id: Int!): Annotation
  signin(userCredentials: UserCredentials!): AccessToken!
  test: Boolean!
  cats(order: String, descending: Boolean, skip: Int, take: Int, id: Int, bornAt: DateTime, sterilized: Boolean, sterilizedAt: DateTime, colonyId: Int, colorId: Int, patternId: Int, eyesId: Int, gender: Gender): FindCatsResult
  cat(id: Int!): Cat
  ceaseCauses(order: String, descending: Boolean, skip: Int, take: Int, id: Int, description: String): FindCeaseCausesResult
  ceaseCause(id: Int!): CeaseCause
  colonies(order: String, descending: Boolean, skip: Int, take: Int, id: Int, address: String, locationTypeId: Int, environmentId: Int, townId: Int): FindColoniesResult
  colony(id: Int!): Colony
  users(order: String, descending: Boolean, skip: Int, take: Int, id: Int, name: String, surnames: String, idCard: String, phoneNumber: String, email: String, authorizesWhatsApp: Boolean): FindUsersResult
  user(id: Int!): User
  colonyAnnotations(order: String, descending: Boolean, skip: Int, take: Int, id: Int, colonyId: Int, annotation: String): FindColonyAnnotationsResult
  colonyAnnotation(id: Int!): ColonyAnnotation
  colors(order: String, descending: Boolean, skip: Int, take: Int, id: Int, description: String): FindColorsResult
  color(id: Int!): Color
  environments(order: String, descending: Boolean, skip: Int, take: Int, id: Int, description: String): FindEnvironmentsResult
  environment(id: Int!): Environment
  eyeColors(order: String, descending: Boolean, skip: Int, take: Int, id: Int, description: String): FindEyeColorsResult!
  eyeColor(id: Int!): EyeColor
  locationTypes(order: String, descending: Boolean, skip: Int, take: Int, id: Int, description: String): FindLocationTypesResult
  locationType(id: Int!): LocationType
  patterns(order: String, descending: Boolean, skip: Int, take: Int, id: Int, description: String): FindPatternsResult
  pattern(id: Int!): Pattern
  roles(order: String, descending: Boolean, skip: Int, take: Int, id: Int, description: String): FindRolesResult
  role(id: Int!): Role
  towns(order: String, descending: Boolean, skip: Int, take: Int, id: Int, name: String): FindTownsResult
  town(id: Int!): Town
  userAnnotations(order: String, descending: Boolean, skip: Int, take: Int, id: Int, userId: Int, annotation: String): FindUserAnnotationsResult
  userAnnotation(id: Int!): UserAnnotation
  userCeaseCauses(order: String, descending: Boolean, skip: Int, take: Int, id: Int, description: String): FindUserCeaseCausesResult
  userCeaseCause(id: Int!): UserCeaseCause
}

input UserCredentials {
  email: String!
  password: String!
}

type Mutation {
  createAnnotation(createAnnotationInput: CreateAnnotationInput!): Annotation!
  updateAnnotation(updateAnnotationInput: UpdateAnnotationInput!): Annotation!
  removeAnnotation(id: Int!): RemoveAnnotationResult!
  createCat(createCatInput: CreateCatInput!): Cat!
  updateCat(updateCatInput: UpdateCatInput!): Cat!
  removeCat(id: Int!): RemoveCatResult!
  createCeaseCause(createCeaseCauseInput: CreateCeaseCauseInput!): CeaseCause!
  updateCeaseCause(updateCeaseCauseInput: UpdateCeaseCauseInput!): CeaseCause!
  removeCeaseCause(id: Int!): RemoveCeaseCauseResult!
  createColony(createColonyInput: CreateColonyInput!): Colony!
  updateColony(updateColonyInput: UpdateColonyInput!): Colony!
  removeColony(id: Int!): RemoveColonyResult!
  addColonyManager(userId: Int!, colonyId: Int!): AddColonyManagerResult!
  removeColonyManager(userId: Int!, colonyId: Int!): RemoveColonyManagerResult!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): RemoveUserResult!
  createColonyAnnotation(createColonyAnnotationInput: CreateColonyAnnotationInput!): ColonyAnnotation!
  updateColonyAnnotation(updateColonyAnnotationInput: UpdateColonyAnnotationInput!): ColonyAnnotation!
  removeColonyAnnotation(id: Int!): RemoveColonyAnnotationResult!
  createColor(createColorInput: CreateColorInput!): Color!
  updateColor(updateColorInput: UpdateColorInput!): Color!
  removeColor(id: Int!): RemoveColorResult!
  createEnvironment(createEnvironmentInput: CreateEnvironmentInput!): Environment!
  updateEnvironment(updateEnvironmentInput: UpdateEnvironmentInput!): Environment!
  removeEnvironment(id: Int!): RemoveEnvironmentResult!
  createEyeColor(createEyeColorInput: CreateEyeColorInput!): EyeColor!
  updateEyeColor(updateEyeColorInput: UpdateEyeColorInput!): EyeColor!
  removeEyeColor(id: Int!): EyeColor!
  createLocationType(createLocationTypeInput: CreateLocationTypeInput!): LocationType!
  updateLocationType(updateLocationTypeInput: UpdateLocationTypeInput!): LocationType!
  removeLocationType(id: Int!): RemoveLocationTypeResult!
  createPattern(createPatternInput: CreatePatternInput!): Pattern!
  updatePattern(updatePatternInput: UpdatePatternInput!): Pattern!
  removePattern(id: Int!): RemovePatternResult!
  createRole(createRoleInput: CreateRoleInput!): Role!
  updateRole(updateRoleInput: UpdateRoleInput!): Role!
  removeRole(id: Int!): RemoveRoleResult!
  createTown(createTownInput: CreateTownInput!): Town!
  updateTown(updateTownInput: UpdateTownInput!): Town!
  removeTown(id: Int!): RemoveTownResult!
  createUserAnnotation(createUserAnnotationInput: CreateUserAnnotationInput!): UserAnnotation!
  updateUserAnnotation(updateUserAnnotationInput: UpdateUserAnnotationInput!): UserAnnotation!
  removeUserAnnotation(id: Int!): RemoveUserAnnotationResult!
  createUserCeaseCause(createUserCeaseCauseInput: CreateUserCeaseCauseInput!): UserCeaseCause!
  updateUserCeaseCause(updateUserCeaseCauseInput: UpdateUserCeaseCauseInput!): UserCeaseCause!
  removeUserCeaseCause(id: Int!): RemoveUserCeaseCauseResult!
}

input CreateAnnotationInput {
  catId: Int!
  annotation: String!
}

input UpdateAnnotationInput {
  catId: Int
  annotation: String
  id: Int!
}

input CreateCatInput {
  sterilized: Boolean
  sterilizedAt: DateTime
  colonyId: Int
  patternId: Int
  colors: [InputColor!]
  eyeColorId: Int
  gender: Gender
  ceasedAt: DateTime
  ceaseCauseId: Int
  bornAt: DateTime
  annotations: [InputAnnotation!]
}

input InputColor {
  id: Int!
  description: String!
}

input InputAnnotation {
  id: Int!
  catId: Int!
  annotation: String!
  date: DateTime!
}

input UpdateCatInput {
  sterilized: Boolean
  sterilizedAt: DateTime
  colonyId: Int
  patternId: Int
  colors: [InputColor!]
  eyeColorId: Int
  gender: Gender
  ceasedAt: DateTime
  ceaseCauseId: Int
  bornAt: DateTime
  annotations: [InputAnnotation!]
  id: Int!
}

input CreateCeaseCauseInput {
  description: String!
}

input UpdateCeaseCauseInput {
  description: String
  id: Int
}

input CreateColonyInput {
  address: String!
  locationTypeId: Int
  environmentId: Int
  townId: Int!
}

input UpdateColonyInput {
  address: String
  locationTypeId: Int
  environmentId: Int
  townId: Int
  id: Int!
}

input CreateUserInput {
  name: String!
  surnames: String!
  idCard: String!
  phoneNumber: String!
  email: String!
  password: String!
  authorizesWhatsApp: Boolean
  ceasedAt: DateTime
  ceaseCauseId: Int
}

input UpdateUserInput {
  name: String
  surnames: String
  idCard: String
  phoneNumber: String
  email: String
  password: String
  authorizesWhatsApp: Boolean
  ceasedAt: DateTime
  ceaseCauseId: Int
  id: Int!
}

input CreateColonyAnnotationInput {
  colonyId: Int!
  annotation: String!
}

input UpdateColonyAnnotationInput {
  colonyId: Int
  annotation: String
  id: Int!
}

input CreateColorInput {
  description: String!
}

input UpdateColorInput {
  description: String
  id: Int!
}

input CreateEnvironmentInput {
  description: String!
}

input UpdateEnvironmentInput {
  description: String
  id: Int!
}

input CreateEyeColorInput {
  id: Int
  description: String
}

input UpdateEyeColorInput {
  id: Int!
  description: String
}

input CreateLocationTypeInput {
  description: String!
}

input UpdateLocationTypeInput {
  description: String
  id: Int!
}

input CreatePatternInput {
  description: String!
}

input UpdatePatternInput {
  description: String
  id: Int!
}

input CreateRoleInput {
  description: String!
}

input UpdateRoleInput {
  description: String
  id: Int!
}

input CreateTownInput {
  name: String!
}

input UpdateTownInput {
  name: String
  id: Int!
}

input CreateUserAnnotationInput {
  userId: Int!
  annotation: String!
}

input UpdateUserAnnotationInput {
  userId: Int
  annotation: String
  id: Int!
}

input CreateUserCeaseCauseInput {
  description: String!
}

input UpdateUserCeaseCauseInput {
  description: String
  id: Int
}

type Subscription {
  annotationAdded: Annotation!
  annotationUpdated: Annotation!
  annotationRemoved: Annotation!
  catAdded: Cat!
  catUpdated: Cat!
  catRemoved: Cat!
  ceaseCauseAdded: CeaseCause!
  ceaseCauseUpdated: CeaseCause!
  ceaseCauseRemoved: CeaseCause!
  colonyAdded: Colony!
  colonyUpdated: Colony!
  colonyRemoved: Colony!
  userAdded: User!
  userUpdated: User!
  userRemoved: User!
  colonyAnnotationAdded: ColonyAnnotation!
  colonyAnnotationUpdated: ColonyAnnotation!
  colonyAnnotationRemoved: ColonyAnnotation!
  colorAdded: Color!
  colorUpdated: Color!
  colorRemoved: Color!
  environmentAdded: Environment!
  environmentUpdated: Environment!
  environmentRemoved: Environment!
  eyeColorAdded: EyeColor!
  eyeColorUpdated: EyeColor!
  eyeColorRemoved: EyeColor!
  locationTypeAdded: LocationType!
  locationTypeUpdated: LocationType!
  locationTypeRemoved: LocationType!
  patternAdded: Role!
  patternUpdated: Role!
  patternRemoved: Role!
  townAdded: Town!
  townUpdated: Town!
  townRemoved: Town!
  userAnnotationAdded: UserAnnotation!
  userAnnotationUpdated: UserAnnotation!
  userAnnotationRemoved: UserAnnotation!
  userCeaseCauseAdded: UserCeaseCause!
  userCeaseCauseUpdated: UserCeaseCause!
  userCeaseCauseRemoved: UserCeaseCause!
}
